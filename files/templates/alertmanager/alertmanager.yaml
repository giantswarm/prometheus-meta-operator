global:
  resolve_timeout: 5m
[[- if .ProxyURL ]]
  http_config:
    proxy_url:  [[ .ProxyURL ]]
[[- end ]]
  slack_api_url: [[ .SlackApiURL ]]

templates:
- '*.tmpl'

route:
  group_by: [alertname, cluster_id, installation, status]
  group_interval: 15m
  group_wait: 30s
  repeat_interval: 4h
  receiver: root
  routes:
    # Team Ops Opsgenie
  - receiver: opsgenie_router
    match:
      severity: page
    continue: true

  # Project Customer Slack
  - receiver: sig_customers_slack
    match_re:
      severity: notify
      team: se
    repeat_interval: 24h
    continue: false

  # SIG Customer Slack
  - receiver: sig_customers_slack
    match_re:
      severity: page|notify
      sig: customers
    repeat_interval: 24h
    continue: true

  - receiver: team_biscuit_slack
    match:
      alertname: ServiceLevelBurnRateTooHigh
      cluster_type: management_cluster
    continue: false

  # Service Level slack -- chooses the slack channel based on the provider
  [[ if eq .Provider "aws" ]]
  - receiver: team_firecracker_slack
  [[ else if eq .Provider "azure" ]]
  - receiver: team_celestial_slack
  [[ else if or (eq .Provider "kvm") (eq .Provider "vmware") ]]
  - receiver: team_rocket_slack
  [[ end ]]
    match:
      alertname: ServiceLevelBurnRateTooHigh
    continue: false

  # Team Atlas Slack (team)
  - receiver: team_atlas_slack
    match_re:
      severity: page
      team: atlas
    continue: false

  # Team Batman Slack (team)
  - receiver: team_batman_slack
    match_re:
      severity: page|notify
      team: batman
    continue: false

  # Team Biscuit Slack (team)
  - receiver: team_biscuit_slack
    match_re:
      severity: page
      team: biscuit
    continue: false

  # Team Celestial Slack (team)
  - receiver: team_celestial_slack
    match_re:
      severity: page|notify
      team: celestial
    continue: false

  # Team Firecracker Slack (team)
  - receiver: team_firecracker_slack
    match_re:
      severity: page|notify
      team: firecracker
    continue: false

  # Team Ludacris Slack (team)
  - receiver: team_ludacris_slack
    match_re:
      severity: page|notify
      team: ludacris
    continue: false

  # Team Rocket Slack (team)
  - receiver: team_rocket_slack
    match_re:
      severity: page|notify
      team: rocket
    continue: false

  # Team Ops Slack
  - receiver: team_ops_slack
    match_re:
      severity: page|notify
    continue: true

receivers:
- name: root

- name: sig_customers_slack
  slack_configs:
  - channel: '#alert-customers'
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{`{{ (index .Alerts 0).Annotations.opsrecipe }}`}}'
      style: '{{`{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}`}}'
    - type: button
      text: ':mag: Query'
      url: '{{`{{ (index .Alerts 0).GeneratorURL }}`}}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/{{`{{ (index .Alerts 0).Annotations.dashboard }}`}}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{`{{ template "__alert_silence_link" . }}`}}'
      style: '{{`{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}`}}'

- name: team_atlas_slack
  slack_configs:
  - channel: '#alert-atlas'
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{`{{ (index .Alerts 0).Annotations.opsrecipe }}`}}'
      style: '{{`{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}`}}'
    - type: button
      text: ':coffin: Linked PMs'
      url: '{{`{{ template "__alert_linked_postmortems" . }}`}}'
    - type: button
      text: ':mag: Query'
      url: '{{`{{ (index .Alerts 0).GeneratorURL }}`}}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/{{`{{ (index .Alerts 0).Annotations.dashboard }}`}}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{`{{ template "__alert_silence_link" . }}`}}'
      style: '{{`{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}`}}'

- name: team_batman_slack
  slack_configs:
  [[- if eq .Pipeline "stable" ]]
  - channel: '#alert-batman'
  [[- else ]]
  - channel: '#alert-batman-test'
  [[- end ]]
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{`{{ (index .Alerts 0).Annotations.opsrecipe }}`}}'
      style: '{{`{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}`}}'
    - type: button
      text: ':coffin: Linked PMs'
      url: '{{`{{ template "__alert_linked_postmortems" . }}`}}'
    - type: button
      text: ':mag: Query'
      url: '{{`{{ (index .Alerts 0).GeneratorURL }}`}}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/{{`{{ (index .Alerts 0).Annotations.dashboard }}`}}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{`{{ template "__alert_silence_link" . }}`}}'
      style: '{{`{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}`}}'

- name: team_biscuit_slack
  slack_configs:
  - channel: '#alert-biscuit'
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://github.com/giantswarm/giantswarm/blob/master/ops-recipes/{{`{{ (index .Alerts 0).Annotations.opsrecipe }}`}}'
      style: '{{`{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}`}}'
    - type: button
      text: ':coffin: Linked PMs'
      url: '{{`{{ template "__alert_linked_postmortems" . }}`}}'
    - type: button
      text: ':mag: Query'
      url: '{{`{{ (index .Alerts 0).GeneratorURL }}`}}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/{{`{{ (index .Alerts 0).Annotations.dashboard }}`}}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{`{{ template "__alert_silence_link" . }}`}}'
      style: '{{`{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}`}}'

- name: team_celestial_slack
  slack_configs:
  [[- if eq .Pipeline "stable" ]]
  - channel: '#alert-celestial'
  [[- else ]]
  - channel: '#alert-celestial-test'
  [[- end ]]
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{`{{ (index .Alerts 0).Annotations.opsrecipe }}`}}'
      style: '{{`{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}`}}'
    - type: button
      text: ':coffin: Linked PMs'
      url: '{{`{{ template "__alert_linked_postmortems" . }}`}}'
    - type: button
      text: ':mag: Query'
      url: '{{`{{ (index .Alerts 0).GeneratorURL }}`}}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/{{`{{ (index .Alerts 0).Annotations.dashboard }}`}}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{`{{ template "__alert_silence_link" . }}`}}'
      style: '{{`{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}`}}'

- name: team_firecracker_slack
  slack_configs:
  [[- if eq .Pipeline "stable" ]]
  - channel: '#alert-firecracker'
  [[- else ]]
  - channel: '#alert-firecracker-test'
  [[- end ]]
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{`{{ (index .Alerts 0).Annotations.opsrecipe }}`}}'
      style: '{{`{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}`}}'
    - type: button
      text: ':coffin: Linked PMs'
      url: '{{`{{ template "__alert_linked_postmortems" . }}`}}'
    - type: button
      text: ':mag: Query'
      url: '{{`{{ (index .Alerts 0).GeneratorURL }}`}}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/{{`{{ (index .Alerts 0).Annotations.dashboard }}`}}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{`{{ template "__alert_silence_link" . }}`}}'
      style: '{{`{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}`}}'

- name: team_ludacris_slack
  slack_configs:
  [[- if eq .Pipeline "stable" ]]
  - channel: '#alert-ludacris'
  [[- else ]]
  - channel: '#alert-ludacris-test'
  [[- end ]]
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{`{{ (index .Alerts 0).Annotations.opsrecipe }}`}}'
      style: '{{`{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}`}}'
    - type: button
      text: ':coffin: Linked PMs'
      url: '{{`{{ template "__alert_linked_postmortems" . }}`}}'
    - type: button
      text: ':mag: Query'
      url: '{{`{{ (index .Alerts 0).GeneratorURL }}`}}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/{{`{{ (index .Alerts 0).Annotations.dashboard }}`}}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{`{{ template "__alert_silence_link" . }}`}}'
      style: '{{`{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}`}}'

- name: team_rocket_slack
  slack_configs:
  [[- if eq .Pipeline "stable" ]]
  - channel: '#alert-rocket'
  [[- else ]]
  - channel: '#alert-rocket-test'
  [[- end ]]
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{`{{ (index .Alerts 0).Annotations.opsrecipe }}`}}'
      style: '{{`{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}`}}'
    - type: button
      text: ':coffin: Linked PMs'
      url: '{{`{{ template "__alert_linked_postmortems" . }}`}}'
    - type: button
      text: ':mag: Query'
      url: '{{`{{ (index .Alerts 0).GeneratorURL }}`}}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/{{`{{ (index .Alerts 0).Annotations.dashboard }}`}}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{`{{ template "__alert_silence_link" . }}`}}'
      style: '{{`{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}`}}'

- name: opsgenie_router
  opsgenie_configs:
  - api_key: [[ .OpsgenieKey ]]
    tags: "{{`{{ (index .Alerts 0).Labels.alertname }},{{ (index .Alerts 0).Labels.cluster_type }},{{ (index .Alerts 0).Labels.severity }},{{ (index .Alerts 0).Labels.team }},{{ (index .Alerts 0).Labels.area }}`}},[[ .Provider ]],[[ .Installation ]],[[ .Pipeline ]]"

- name: team_ops_slack
  slack_configs:
  [[- if eq .Pipeline "stable" ]]
  - channel: '#alert'
  [[- else ]]
  - channel: '#alert-test-[[ .Installation ]]'
  [[- end ]]
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{`{{ (index .Alerts 0).Annotations.opsrecipe }}`}}'
      style: '{{`{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}`}}'
    - type: button
      text: ':coffin: Linked PMs'
      url: '{{`{{ template "__alert_linked_postmortems" . }}`}}'
    - type: button
      text: ':mag: Query'
      url: '{{`{{ (index .Alerts 0).GeneratorURL }}`}}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/{{`{{ (index .Alerts 0).Annotations.dashboard }}`}}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{`{{ template "__alert_silence_link" . }}`}}'
      style: '{{`{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}`}}'

inhibit_rules:
- source_match:
    kube_state_metrics_down: true
  target_match:
    cancel_if_kube_state_metrics_down: true
  equal: [cluster_id]
- source_match:
    kube_state_metrics_down: true
    cluster_id: '[[ .Installation ]]'
  target_match:
    cancel_if_mc_kube_state_metrics_down: true
- source_match:
    kube_state_metrics_down: true
  target_match:
    cancel_if_any_kube_state_metrics_down: true
- source_match:
    cluster_status_creating: true
  target_match:
    cancel_if_cluster_status_creating: true
  equal: [cluster_id]
- source_match:
    cluster_status_created: true
  target_match:
    cancel_if_cluster_status_created: true
  equal: [cluster_id]
- source_match:
    cluster_status_updating: true
  target_match:
    cancel_if_cluster_status_updating: true
  equal: [cluster_id]
- source_match:
    cluster_status_updated: true
  target_match:
    cancel_if_cluster_status_updated: true
  equal: [cluster_id]
- source_match:
    cluster_status_deleting: true
  target_match:
    cancel_if_cluster_status_deleting: true
  equal: [cluster_id]
- source_match:
    cluster_with_no_nodepools: true
  target_match:
    cancel_if_cluster_with_no_nodepools: true
  equal: [cluster_id]
- source_match:
    cluster_with_scaling_nodepools: true
  target_match:
    cancel_if_cluster_with_scaling_nodepools: true
  equal: [cluster_id]
- source_match:
    cluster_with_notready_nodepools: true
  target_match:
    cancel_if_cluster_with_notready_nodepools: true
  equal: [cluster_id]
- source_match:
    instance_state_not_running: true
  target_match:
    cancel_if_instance_state_not_running: true
  equal: [node]
- source_match:
    kiam_has_errors: true
  target_match:
    cancel_if_kiam_has_errors: true
  equal: [cluster_id]
- source_match:
    kubelet_down: true
  target_match:
    cancel_if_kubelet_down: true
  equal: [cluster_id, ip]
- source_match:
    kubelet_down: true
  target_match:
    cancel_if_any_kubelet_down: true
  equal: [cluster_id]
- source_match:
    kubelet_not_ready: true
  target_match:
    cancel_if_kubelet_not_ready: true
  equal: [cluster_id, ip]
- source_match:
    kubelet_not_ready: true
  target_match:
    cancel_if_any_kubelet_not_ready: true
  equal: [cluster_id]
- source_match:
    nodes_down: true
  target_match:
    cancel_if_nodes_down: true
  equal: [cluster_id]
- source_match:
    scrape_timeout: true
  target_match:
    cancel_if_scrape_timeout: true
  equal: [cluster_id, instance]
- source_match:
    master_node_down: true
  target_match:
    cancel_if_master_node_down: true
  equal: [cluster_id]
- source_match:
    apiserver_down: true
  target_match:
    cancel_if_apiserver_down: true
  equal: [cluster_id]
- source_match:
    apiserver_down: true
  target_match:
    cancel_if_any_apiserver_down: true
- source_match:
    outside_working_hours: true
  target_match:
    cancel_if_outside_working_hours: true
