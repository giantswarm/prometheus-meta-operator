global:
  resolve_timeout: 5m
[[- if .ProxyURL ]]
  http_config:
    proxy_url:  [[ .ProxyURL ]]
[[- end ]]
  slack_api_url: [[ .SlackApiURL ]]

templates:
- '/etc/alertmanager/config/*.tmpl'

route:
  group_by: [alertname, cluster_id, installation, status]
  group_interval: 15m
  group_wait: 30s
  repeat_interval: 4h
  receiver: root

  routes:

  - receiver: harbor_implementation
    matchers:
    - app="harbor"
    continue: false

  # Falco noise Slack
  - receiver: falco_noise_slack
    matchers:
    - alertname=~"Falco.*"
    continue: false

  # Team Shield Slack
  # Shield doesn't have a proper support and on-call rotation yet, we're only forwarding
  # alerts to the slack channel. Once the proper rotation is in place, we have to move it below
  # the default opsgenie route
  - receiver: team_shield_slack
    matchers:
    - severity=~"page|notify"
    - team="shield"
    continue: false

  # Team Teddyfriends Slack
  # We only forward the alerts to the Slack channel
  - receiver: team_teddyfriends_slack
    matchers:
    - severity=~"page|notify"
    - team="teddyfriends"
    continue: false

  # Team Ops Opsgenie
  - receiver: opsgenie_router
    matchers:
    - severity="page"
    continue: true

  # Service Level slack -- chooses the slack channel based on the provider
  [[- if or (eq .Provider "aws") (eq .Provider "azure") ]]
  - receiver: team_phoenix_slack
  [[- else if or (eq .Provider "gcp") (eq .Provider "capa")]]
  - receiver: team_hydra_slack
  [[- else if eq .Provider "capz" ]]
  - receiver: team_clippy_slack
  [[- else ]]
  - receiver: team_rocket_slack
  [[- end ]]
    matchers:
    - alertname="ServiceLevelBurnRateTooHigh"
    continue: false

  # Team Atlas Slack
  - receiver: team_atlas_slack
    matchers:
    [[- if eq .Pipeline "stable" ]]
    - severity="notify"
    [[- else ]]
    - severity=~"page|notify"
    [[- end ]]
    - team="atlas"
    - type!="heartbeat"
    - alertname!~"Inhibition.*"
    continue: false

  # Team Celestial Slack
  - receiver: team_phoenix_slack
    matchers:
    - severity=~"page|notify"
    - team="celestial"
    - sloth_severity=~"page|ticket"
    continue: false

  # Team Firecracker Slack
  - receiver: team_phoenix_slack
    matchers:
    - severity=~"page|notify"
    - team="firecracker"
    - sloth_severity=~"page|ticket"
    continue: false

  # Team Phoenix Slack
  - receiver: team_phoenix_slack
    matchers:
    - severity=~"page|notify"
    - team="phoenix"
    - sloth_severity=~"page|ticket"
    continue: false

  # Team Hydra Slack
  - receiver: team_hydra_slack
    matchers:
    - severity=~"page|notify"
    - team="hydra"
    continue: false

  # Team Clippy Slack
  - receiver: team_clippy_slack
    matchers:
    - severity=~"page|notify"
    - team="clippy"
    continue: false

  # Team Rocket Slack
  - receiver: team_rocket_slack
    matchers:
    - severity=~"page|notify"
    - team="rocket"
    continue: false

  # Team Ops Slack
  - receiver: team_ops_slack
    matchers:
    - severity=~"page|notify"
    continue: true

receivers:
- name: root

- name: 'harbor_implementation'
  slack_configs:
  - channel: '#harbor-implementation'

- name: falco_noise_slack
  slack_configs:
  - channel: '#noise-falco'
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{ (index .Alerts 0).Annotations.opsrecipe }}'
      style: '{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}'
    - type: button
      text: ':coffin: Linked PMs'
      url: '{{ template "__alert_linked_postmortems" . }}'
    - type: button
      text: ':mag: Query'
      url: '{{ (index .Alerts 0).GeneratorURL }}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/d/{{ (index .Alerts 0).Annotations.dashboard }}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{ template "__alert_silence_link" .}}'
      style: '{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}'

- name: team_atlas_slack
  slack_configs:
  [[- if eq .Pipeline "stable" ]]
  - channel: '#alert-atlas'
  [[- else ]]
  - channel: '#alert-atlas-test'
  [[- end ]]
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{ (index .Alerts 0).Annotations.opsrecipe }}'
      style: '{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}'
    - type: button
      text: ':coffin: Linked PMs'
      url: '{{ template "__alert_linked_postmortems" . }}'
    - type: button
      text: ':mag: Query'
      url: '{{ (index .Alerts 0).GeneratorURL }}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/d/{{ (index .Alerts 0).Annotations.dashboard }}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{ template "__alert_silence_link" .}}'
      style: '{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}'

- name: team_teddyfriends_slack
  slack_configs:
  - channel: '#team-teddyfriends'
    actions:
    - type: button
      text: ':grafana: Dashboard'
      url: '{{ (index .Alerts 0).Annotations.dashboard }}'

- name: team_phoenix_slack
  slack_configs:
  [[- if eq .Pipeline "stable" ]]
  - channel: '#alert-phoenix'
  [[- else ]]
  - channel: '#alert-phoenix-test'
  [[- end ]]
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{ (index .Alerts 0).Annotations.opsrecipe }}'
      style: '{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}'
    - type: button
      text: ':coffin: Linked PMs'
      url: '{{ template "__alert_linked_postmortems" . }}'
    - type: button
      text: ':mag: Query'
      url: '{{ (index .Alerts 0).GeneratorURL }}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/d/{{ (index .Alerts 0).Annotations.dashboard }}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{ template "__alert_silence_link" . }}'
      style: '{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}'

- name: team_hydra_slack
  slack_configs:
  [[- if eq .Pipeline "stable" ]]
  - channel: '#alert-hydra'
  [[- else ]]
  - channel: '#alert-hydra-test'
  [[- end ]]
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{ (index .Alerts 0).Annotations.opsrecipe }}'
      style: '{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}'
    - type: button
      text: ':coffin: Linked PMs'
      url: '{{ template "__alert_linked_postmortems" . }}'
    - type: button
      text: ':mag: Query'
      url: '{{ (index .Alerts 0).GeneratorURL }}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/d/{{ (index .Alerts 0).Annotations.dashboard }}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{ template "__alert_silence_link" . }}'
      style: '{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}'

- name: team_clippy_slack
  slack_configs:
  [[- if eq .Pipeline "stable" ]]
  - channel: '#alert-clippy'
  [[- else ]]
  - channel: '#alert-clippy-test'
  [[- end ]]
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{ (index .Alerts 0).Annotations.opsrecipe }}'
      style: '{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}'
    - type: button
      text: ':coffin: Linked PMs'
      url: '{{ template "__alert_linked_postmortems" . }}'
    - type: button
      text: ':mag: Query'
      url: '{{ (index .Alerts 0).GeneratorURL }}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/d/{{ (index .Alerts 0).Annotations.dashboard }}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{ template "__alert_silence_link" . }}'
      style: '{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}'

- name: team_rocket_slack
  slack_configs:
  [[- if eq .Pipeline "stable" ]]
  - channel: '#alert-rocket'
  [[- else ]]
  - channel: '#alert-rocket-test'
  [[- end ]]
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{ (index .Alerts 0).Annotations.opsrecipe }}'
      style: '{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}'
    - type: button
      text: ':coffin: Linked PMs'
      url: '{{ template "__alert_linked_postmortems" . }}'
    - type: button
      text: ':mag: Query'
      url: '{{ (index .Alerts 0).GeneratorURL }}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/d/{{ (index .Alerts 0).Annotations.dashboard }}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{ template "__alert_silence_link" . }}'
      style: '{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}'

- name: team_shield_slack
  slack_configs:
  - channel: '#alert-shield'
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{ (index .Alerts 0).Annotations.opsrecipe }}'
      style: '{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}'
    - type: button
      text: ':coffin: Linked PMs'
      url: '{{ template "__alert_linked_postmortems" . }}'
    - type: button
      text: ':mag: Query'
      url: '{{ (index .Alerts 0).GeneratorURL }}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/d/{{ (index .Alerts 0).Annotations.dashboard }}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{ template "__alert_silence_link" .}}'
      style: '{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}'

- name: opsgenie_router
  opsgenie_configs:
  - api_key: [[ .OpsgenieKey ]]
    tags: "{{ (index .Alerts 0).Labels.alertname }},{{ (index .Alerts 0).Labels.cluster_type }},{{ (index .Alerts 0).Labels.severity }},{{ (index .Alerts 0).Labels.team }},{{ (index .Alerts 0).Labels.area }},{{ (index .Alerts 0).Labels.service_priority }},[[ .Provider ]],[[ .Installation ]],[[ .Pipeline ]]"

- name: team_ops_slack
  slack_configs:
  [[- if eq .Pipeline "stable" ]]
  - channel: '#alert'
  [[- else ]]
  - channel: '#alert-test-[[ .Installation ]]'
  [[- end ]]
    send_resolved: true
    actions:
    - type: button
      text: ':green_book: OpsRecipe'
      url: 'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{ (index .Alerts 0).Annotations.opsrecipe }}'
      style: '{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}'
    - type: button
      text: ':coffin: Linked PMs'
      url: '{{ template "__alert_linked_postmortems" . }}'
    - type: button
      text: ':mag: Query'
      url: '{{ (index .Alerts 0).GeneratorURL }}'
    - type: button
      text: ':grafana: Dashboard'
      url: '[[ .GrafanaAddress ]]/d/{{ (index .Alerts 0).Annotations.dashboard }}'
    - type: button
      text: ':no_bell: Silence'
      url: '{{ template "__alert_silence_link" . }}'
      style: '{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}'

inhibit_rules:
- source_matchers:
  - kube_state_metrics_down=true
  target_matchers:
  - cancel_if_kube_state_metrics_down=true
  equal: [cluster_id]

- source_matchers:
  - kube_state_metrics_down=true
  - cluster_id=[[ .Installation ]]
  target_matchers:
  - cancel_if_mc_kube_state_metrics_down=true

- source_matchers:
  - kube_state_metrics_down=true
  target_matchers:
  - cancel_if_any_kube_state_metrics_down=true

- source_matchers:
  - cluster_status_creating=true
  target_matchers:
  - cancel_if_cluster_status_creating=true
  equal: [cluster_id]

- source_matchers:
  - cluster_status_created=true
  target_matchers:
  - cancel_if_cluster_status_created=true
  equal: [cluster_id]

- source_matchers:
  - cluster_status_updating=true
  target_matchers:
  - cancel_if_cluster_status_updating=true
  equal: [cluster_id]

- source_matchers:
  - cluster_status_updated=true
  target_matchers:
  - cancel_if_cluster_status_updated=true
  equal: [cluster_id]

- source_matchers:
  - cluster_status_deleting=true
  target_matchers:
  - cancel_if_cluster_status_deleting=true
  equal: [cluster_id]

- source_matchers:
  - cluster_with_no_nodepools=true
  target_matchers:
  - cancel_if_cluster_with_no_nodepools=true
  equal: [cluster_id]

- source_matchers:
  - cluster_with_scaling_nodepools=true
  target_matchers:
  - cancel_if_cluster_with_scaling_nodepools=true
  equal: [cluster_id]

- source_matchers:
  - cluster_with_notready_nodepools=true
  target_matchers:
  - cancel_if_cluster_with_notready_nodepools=true
  equal: [cluster_id]

- source_matchers:
  - instance_state_not_running=true
  target_matchers:
  - cancel_if_instance_state_not_running=true
  equal: [node]

- source_matchers:
  - kiam_has_errors=true
  target_matchers:
  - cancel_if_kiam_has_errors=true
  equal: [cluster_id]

- source_matchers:
  - kubelet_down=true
  target_matchers:
  - cancel_if_kubelet_down=true
  equal: [cluster_id, ip]

- source_matchers:
  - kubelet_down=true
  target_matchers:
  - cancel_if_any_kubelet_down=true
  equal: [cluster_id]

- source_matchers:
  - kubelet_not_ready=true
  target_matchers:
  - cancel_if_kubelet_not_ready=true
  equal: [cluster_id, ip]

- source_matchers:
  - kubelet_not_ready=true
  target_matchers:
  - cancel_if_any_kubelet_not_ready=true
  equal: [cluster_id]

- source_matchers:
  - nodes_down=true
  target_matchers:
  - cancel_if_nodes_down=true
  equal: [cluster_id]

- source_matchers:
  - scrape_timeout=true
  target_matchers:
  - cancel_if_scrape_timeout=true
  equal: [cluster_id, instance]

- source_matchers:
  - master_node_down=true
  target_matchers:
  - cancel_if_master_node_down=true
  equal: [cluster_id]

- source_matchers:
  - apiserver_down=true
  target_matchers:
  - cancel_if_apiserver_down=true
  equal: [cluster_id]

- source_matchers:
  - apiserver_down=true
  target_matchers:
  - cancel_if_any_apiserver_down=true

- source_matchers:
  - outside_working_hours=true
  target_matchers:
  - cancel_if_outside_working_hours=true

- source_matchers:
  - has_worker_nodes=false
  target_matchers:
  - cancel_if_cluster_has_no_workers=true
  equal: [cluster_id]

- source_matchers:
    - cluster_is_not_running_prometheus_agent=true
  target_matchers:
    - cancel_if_cluster_is_not_running_prometheus_agent=true
  equal: [cluster_id]

- source_matchers:
    - inhibit_prometheus_agent_down=true
  target_matchers:
    - cancel_if_prometheus_agent_down=true
  equal: [cluster_id]

- source_matchers:
    - stack_failed=true
  target_matchers:
    - cancel_if_stack_failed=true
