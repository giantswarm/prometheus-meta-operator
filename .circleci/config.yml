version: 2.1

orbs:
  architect: giantswarm/architect@2.3.0
  localorb:
    commands:
      push-to-app-collection:
        parameters:
          app_name:
            type: "string"
          app_namespace:
            type: "string"
          app_catalog:
            type: "string"
          app_collection_repo:
            type: "string"
          disable_force_upgrade:
            type: "boolean"
          user_configmap_name:
            description: "Name of the app user config configmap."
            type: "string"
            default: ""
          user_configmap_path:
            description: "Path of the app user config configmap."
            type: "string"
            default: ""
          user_secret_name:
            description: "Name of the app user config secret."
            type: "string"
            default: ""
          user_secret_path:
            description: "Path of the app user config secret."
            type: "string"
            default: ""
        steps:
          - run:
              name: "architect/push-to-app-collection: Generate version"
              command: |
                architect project version | tee .app_version
          - run:
              name: "architect/push-to-app-collection: Find configuration version"
              command: |
                echo "====> Make sure Chart.yaml exists"
                ls helm/<<parameters.app_name>>/Chart.yaml >/dev/null
                echo "====> Skip if Chart.yaml does not contain the annotation"
                if ! grep 'config.giantswarm.io/version' helm/<<parameters.app_name>>/Chart.yaml ; then
                  touch .config_version
                  echo "Skip: annotation \"config.giantswarm.io/version\" not found in helm/<<parameters.app_name>>/Chart.yaml"
                  exit 0
                fi
                echo "====> Extract annotation value"
                # Pipe trough xargs to remove quotes.
                grep 'config.giantswarm.io/version' helm/<<parameters.app_name>>/Chart.yaml | awk '{ print $2 }' | xargs | tee .config_version
          - run:
              name: "architect/push-to-app-collection: Generate app CR"
              command: |
                architect create appcr \
                  --name "<<parameters.app_name>>-unique" \
                  --app-name "<<parameters.app_name>>" \
                  --app-namespace "<<parameters.app_namespace>>" \
                  --app-version "$(cat .app_version)" \
                  --catalog "<<parameters.app_catalog>>" \
                  --config-version "$(cat .config_version)" \
                  --disable-force-upgrade=<<parameters.disable_force_upgrade>> \
                  --user-configmap-name "<<parameters.user_configmap_name>>" \
                  --user-secret-name "<<parameters.user_secret_name>>" \
                  -o yaml | tee .app.yaml
          - run:
              name: "architect/push-to-app-collection: Clone app collection repo"
              command: |
                git ls-remote --exit-code --heads git@github.com:giantswarm/<<parameters.app_collection_repo>>.git main
                if [ $? = 0 ]; then
                  git clone -q --depth=1 --single-branch -b main git@github.com:giantswarm/<<parameters.app_collection_repo>>.git .app-collection ;
                else
                  git clone -q --depth=1 --single-branch -b master git@github.com:giantswarm/<<parameters.app_collection_repo>>.git .app-collection ;
                fi
          - run:
              name: "architect/push-to-app-collection: Clean previous app CRs in the app collection repo"
              command: |
                git -C .app-collection rm --ignore-unmatch helm/<<parameters.app_collection_repo>>-chart/templates/<<parameters.app_name>>-*.yaml
          - run:
              name: "architect/push-to-app-collection: Add app CR to the app collection repo"
              command: |
                mkdir -p .app-collection/helm/<<parameters.app_collection_repo>>-chart/templates
                mv -n .app.yaml .app-collection/helm/<<parameters.app_collection_repo>>-chart/templates/<<parameters.app_name>>-unique.yaml
                git -C .app-collection add helm/<<parameters.app_collection_repo>>-chart/templates/<<parameters.app_name>>-unique.yaml
          - when:
              condition:
                and:
                - <<parameters.user_configmap_name>>
                - <<parameters.user_configmap_path>>
              steps:
                - run:
                    name: "architect/push-to-app-collection: Add user ConfigMap to the app collection repo"
                    command: |
                      mv -n <<parameters.user_configmap_path>> .app-collection/helm/<<parameters.app_collection_repo>>-chart/templates/<<parameters.app_name>>-unique.user_configmap.yaml
                      git -C .app-collection add helm/<<parameters.app_collection_repo>>-chart/templates/<<parameters.app_name>>-unique.user_configmap.yaml
          - when:
              condition:
                and:
                - <<parameters.user_secret_name>>
                - <<parameters.user_secret_path>>
              steps:
                - run:
                    name: "architect/push-to-app-collection: Add user Secret to the app collection repo"
                    command: |
                      mv -n <<parameters.user_secret_path>> .app-collection/helm/<<parameters.app_collection_repo>>-chart/templates/<<parameters.app_name>>-unique.user_secret.yaml
                      git -C .app-collection add helm/<<parameters.app_collection_repo>>-chart/templates/<<parameters.app_name>>-unique.user_secret.yaml
          - run:
              name: "architect/push-to-app-collection: Commit changes to the app collection repo"
              command: |
                git -C .app-collection commit -m "update <<parameters.app_name>>-unique to $(cat .app_version)"
          - run:
              name: "architect/push-to-app-collection: Push changes to the app collection repo"
              command: |
                  cd .app-collection
                  ret=1
                  tries=4
                  for i in $(seq 1 $tries) ; do
                    echo "====> Attempt $i: Running: git pull --rebase"
                    git pull --rebase
                    echo "====> Attempt $i: Running: git push"
                    set +e
                    git push
                    ret=$?
                    set -e
                    [[ $ret -eq 0 ]] && exit $ret
                    sleep 5
                  done
                  echo "Giving up after $tries failures." >&2
                  echo "Error pushing changes. See known errors in:" >&2
                  echo "https://github.com/giantswarm/architect-orb/blob/master/README.md#push-to-app-collection" >&2
                  exit $ret
          - run:
              name: "architect/push-to-app-collection: Cleanup"
              command: |
                rm .app_version .config_version
workflows:
  build:
    jobs:
      - architect/go-build:
          name: build
          binary: prometheus-meta-operator
          resource_class: large
          filters:
            tags:
              only: /^v.*/

      - architect/push-to-docker:
          name: push-to-quay
          context: "architect"
          image: "quay.io/giantswarm/prometheus-meta-operator"
          username_envar: "QUAY_USERNAME"
          password_envar: "QUAY_PASSWORD"
          requires:
            - build
          filters:
            tags:
              only: /^v.*/

      - architect/push-to-docker:
          name: push-to-aliyun
          context: "architect"
          image: "registry-intl.cn-shanghai.aliyuncs.com/giantswarm/prometheus-meta-operator"
          username_envar: "ALIYUN_USERNAME"
          password_envar: "ALIYUN_PASSWORD"
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/

      - architect/push-to-app-catalog:
          name: app-catalog
          context: "architect"
          app_catalog: "control-plane-catalog"
          app_catalog_test: "control-plane-test-catalog"
          chart: "prometheus-meta-operator"
          requires:
            - build
          filters:
            tags:
              only: /^v.*/

      - architect/push-to-app-collection:
          name: aws-app-collection
          context: "architect"
          app_name: "prometheus-meta-operator"
          app_namespace: "monitoring"
          app_collection_repo: "aws-app-collection"
          requires:
            - push-to-quay
            - push-to-aliyun
            - app-catalog
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/

      - architect/push-to-app-collection:
          name: azure-app-collection
          context: "architect"
          app_name: "prometheus-meta-operator"
          app_namespace: "monitoring"
          app_collection_repo: "azure-app-collection"
          requires:
            - push-to-quay
            - push-to-aliyun
            - app-catalog
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/

      - architect/push-to-app-collection:
          name: kvm-app-collection
          context: "architect"
          app_name: "prometheus-meta-operator"
          app_namespace: "monitoring"
          app_collection_repo: "kvm-app-collection"
          requires:
            - push-to-quay
            - push-to-aliyun
            - app-catalog
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/

      - localorb/push-to-app-collection:
          name: vmware-app-collection
          app_name: "prometheus-meta-operator"
          app_namespace: "monitoring"
          app_collection_repo: "vmware-app-collection"
          requires:
            - push-to-quay
            - push-to-aliyun
            - app-catalog
