apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  labels:
    {{- include "labels.common" . | nindent 4 }}
  name: cortex
  namespace: '{{ include "resource.default.namespace" . }}'
spec:
  groups:
  - name: cortex
    rules:
    - expr: sum(alertmanager_alerts{state="active"})
      record: aggregation:alertmanager:alerts_active_total
    - expr: sum(alertmanager_alerts{state="suppressed"})
      record: aggregation:alertmanager:alerts_suppressed_total
    - expr: sum(alertmanager_silences{state="active"})
      record: aggregation:alertmanager:silences_active_total
    - expr: sum(alertmanager_silences{state="expired"})
      record: aggregation:alertmanager:silences_expired_total
    - expr: sum(alertmanager_silences{state="pending"})
      record: aggregation:alertmanager:silences_pending_total
    # Instance types used
    - expr: count(sum(aws_operator_ec2_instance_status) by (ec2_instance, instance_type)) by (instance_type)
      record: aggregation:aws:instance_types
    # Spot Instances being used
    - expr: count(sum(aws_operator_ec2_instance_status{lifecycle != ""}) by (ec2_instance, lifecycle)) by  (lifecycle)
      record: aggregation:aws:instance_lifecycle
    # API usage: authentication fails via the "giantswarm" auth method (customers)
    - expr: sum(rate(api_service_authentication_giantswarm_failed_attempts_total[5m]))
      record: aggregation:giantswarm:api_auth_giantswarm_failed_attempts_total
    # API usage: authentication fails via the "Bearer" auth method (staff)
    - expr: sum(rate(api_service_authentication_jwt_failed_attempts_total[5m]))
      record: aggregation:giantswarm:api_auth_jwt_failed_attempts_total
    # GS Rest API requests
    - expr: sum(rate(nginx_ingress_controller_requests{namespace="giantswarm", ingress="api"}[5m])) by (status)
      record: aggregation:giantswarm:api_requests
    - expr: count(app_operator_app_info{status="deployed",namespace="giantswarm"}) by (name,version)
      record: aggregation:giantswarm:app_deployed_management_cluster_total
    - expr: count(app_operator_app_info{status=~"deployed|DEPLOYED",namespace!="giantswarm"}) by (name,version)
      record: aggregation:giantswarm:app_deployed_workload_cluster_total
    - expr: min(cert_exporter_not_after) by (cluster_id, cluster_type)
      record: aggregation:giantswarm:cluster_certificate_not_after_seconds
    - expr: label_replace(sum(azure_operator_cluster_release{release_version!=""}) by (release_version, cluster_id), "cluster_id", "$1", "cluster_id", "(.*)") or label_replace(sum(cluster_service_cluster_info) by (release_version, cluster_id) / 2, "cluster_id", "$1", "cluster_id", "(.*)") or label_replace(sum(cluster_operator_cluster_status{release_version!=""}) by (release_version, cluster_id), "cluster_id", "$1", "cluster_id", "(.*)")
      record: aggregation:giantswarm:cluster_release_version
    - expr: label_replace(avg_over_time(cluster_operator_cluster_create_transition[1w]), "cluster_id", "$1", "cluster_id", "(.*)") or label_replace(avg_over_time(azure_operator_cluster_create_transition[1w]), "cluster_id", "$1", "cluster_id", "(.*)")
      record: aggregation:giantswarm:cluster_transition_create
    - expr: label_replace(avg_over_time(cluster_operator_cluster_update_transition[1w]), "cluster_id", "$1", "cluster_id", "(.*)")
      record: aggregation:giantswarm:cluster_transition_update
    # Happa requests
    - expr: sum(rate(nginx_ingress_controller_requests{namespace="giantswarm", ingress="happa"}[5m])) by (status)
      record: aggregation:giantswarm:happa_requests
    - expr: sum(cluster_operator_node_pool_count)
      record: aggregation:giantswarm:node_pool_total
    - expr: sum(cluster_operator_node_pool_ready_workers)
      record: aggregation:giantswarm:node_pool_worker_ready_total
    - expr: sum(rate(nginx_ingress_controller_requests{namespace="giantswarm", ingress="passage"}[5m])) by (status)
      record: aggregation:giantswarm:passage_requests
    - expr: sum(rate(nginx_ingress_controller_nginx_process_requests_total[5m])) by (cluster_type, cluster_id)
      record: aggregation:ingress:requests_total
    - expr: sum(kubelet_running_container_count) by (cluster_type, cluster_id)
      record: aggregation:kubelet:running_container_total
    - expr: sum(kubelet_running_pod_count) by (cluster_type, cluster_id)
      record: aggregation:kubelet:running_pod_total
    - expr: sum(kubernetes_build_info{app="kubelet"}) by (cluster_type, gitVersion, cluster_id)
      record: aggregation:kubelet:version
    - expr: sum(apiserver_request_total) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:apiserver_request_count
    - expr: sum(apiserver_request_latencies_bucket) by (le, cluster_type, cluster_id)
      record: aggregation:kubernetes:apiserver_request_latencies_bucket
    - expr: sum(apiserver_audit_event_total) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:audit_event_total
    - expr: count(kube_configmap_created) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:configmap_total
    - expr: count(kube_cronjob_created) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:cronjob_total
    - expr: sum(kube_daemonset_status_number_ready) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:daemonset_ready
    - expr: count(kube_daemonset_created) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:daemonset_total
    - expr: sum(kube_deployment_status_replicas_available) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:deployment_replicas_available
    - expr: sum(kube_deployment_spec_replicas) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:deployment_replicas_desired
    - expr: count(kube_deployment_created) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:deployment_total
    - expr: count(kube_endpoint_created) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:endpoint_total
    - expr: count(kube_ingress_created) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:ingress_total
    - expr: sum(kube_job_status_active) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:job_active
    - expr: sum(kube_job_complete) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:job_complete
    - expr: count(kube_job_created) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:job_total
    - expr: min((kube_node_created) and on (node) (label_replace(kube_pod_created{instance=~".*master.*", pod=~"k8s-api-server.*"}, "node", "$1", "pod", "k8s-api-server-(.*)"))) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:master_node_created
    - expr: count(kube_namespace_created) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:namespace_total
    - expr: sum(kube_node_status_allocatable_cpu_cores) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:node_allocatable_cpu_cores_total
    - expr: sum(kube_node_status_allocatable_memory_bytes) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:node_allocatable_memory_bytes
    - expr: sum(kube_node_status_allocatable_pods) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:node_allocatable_pods_total
    - expr: sum(kube_node_status_condition{condition="DiskPressure", status="true"}) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:node_disk_pressure_total
    - expr: sum(kube_node_status_condition{condition="MemoryPressure", status="true"}) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:node_memory_pressure_total
    - expr: sum(kube_node_status_condition{condition="Ready", status="false"}) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:node_not_ready_total
    - expr: sum(kube_node_status_condition{condition="PIDPressure", status="true"}) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:node_pid_pressure_total
    - expr: sum(kube_node_role) by (cluster_type, role, cluster_id)
      record: aggregation:kubernetes:node_total
    - expr: sum(kube_persistentvolume_capacity_bytes) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:persistentvolume_capacity_bytes
    - expr: count(kube_persistentvolume_info) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:persistentvolume_total
    - expr: sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:persistentvolumeclaim_resource_requests_storage_bytes
    - expr: count(kube_persistentvolumeclaim_info) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:persistentvolumeclaim_total
    - expr: sum(kube_pod_container_resource_limits_cpu_cores) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:pod_resource_limits_cpu_cores
    - expr: sum(kube_pod_container_resource_limits_memory_bytes) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:pod_resource_limits_memory_bytes
    - expr: sum(kube_pod_container_resource_requests_cpu_cores) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:pod_resource_requests_cpu_cores
    - expr: topk(10, sum(kube_pod_container_resource_requests_cpu_cores) by (cluster_type, cluster_id, pod)) by (cluster_id)
      record: aggregation:kubernetes:top10_pod_resource_requests_cpu_cores
    - expr: sum(kube_pod_container_resource_requests_memory_bytes) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:pod_resource_requests_memory_bytes
    - expr: topk(10, sum(kube_pod_container_resource_requests_memory_bytes) by (cluster_type, cluster_id, pod)) by (cluster_id)
      record: aggregation:kubernetes:top10_pod_resource_requests_memory_bytes
    - expr: count(kube_pod_created) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:pod_total
    - expr: sum(kube_replicaset_spec_replicas) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:replicaset_replicas_desired
    - expr: sum(kube_replicaset_status_ready_replicas) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:replicaset_replicas_ready
    - expr: count(kube_replicaset_created) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:replicaset_total
    - expr: count(kube_secret_created) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:secret_total
    - expr: count(kube_service_created) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:service_total
    - expr: count(kube_service_spec_type{type="LoadBalancer"}) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:service_type_loadbalancer
    - expr: count(kube_storageclass_created) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:storageclass_total
    - expr: sum(up{app="kubernetes"}) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:up
    - expr: sum(up{app="kubernetes"}) by (cluster_type, cluster_id) / count(up{app="kubernetes"}) by (cluster_type, cluster_id)
      record: aggregation:kubernetes:up_bool
    - expr: sum(kubernetes_build_info{app="kubernetes"}) by (cluster_type, gitVersion)
      record: aggregation:kubernetes:version
    - expr: count(node_cpu_seconds_total{mode="idle"}) by (cluster_type, cluster_id)
      record: aggregation:node:cpu_cores_total
    - expr: 100 - (avg by (cluster_id, cluster_type) (irate(node_cpu_seconds_total{app="node-exporter", mode="idle"}[5m])) * 100)
      record: aggregation:node:cpu_utilization_percentage
    - expr: sum(node_filesystem_avail_bytes) by (cluster_type, cluster_id)
      record: aggregation:node:filesystem_avail_bytes_total
    - expr: sum(node_filesystem_size_bytes) by (cluster_type, cluster_id)
      record: aggregation:node:filesystem_size_bytes_total
    - expr: sum(node_uname_info) by (cluster_type, release, cluster_id)
      record: aggregation:node:kernel_version
    - expr: sum(node_memory_MemAvailable_bytes) by (cluster_type, cluster_id)
      record: aggregation:node:memory_memavailable_bytes_total
    - expr: sum(node_memory_MemFree_bytes) by (cluster_type, cluster_id)
      record: aggregation:node:memory_memfree_bytes_total
    - expr: sum(node_memory_MemTotal_bytes) by (cluster_type, cluster_id)
      record: aggregation:node:memory_memtotal_bytes_total
    - expr: sum(rate(node_network_receive_bytes_total[5m])) by (cluster_type, cluster_id)
      record: aggregation:node:network_receive_bytes_total
    - expr: sum(rate(node_network_transmit_bytes_total[5m])) by (cluster_type, cluster_id)
      record: aggregation:node:network_transmit_bytes_total
    - expr: sum(ALERTS{alertstate="firing"}) by (alertname, cluster_id, area, severity, team, topic)
      record: aggregation:prometheus:alerts
    - expr: sum(label_replace(container_memory_working_set_bytes{container='prometheus', namespace=~'.*-prometheus'}, "cluster_id", "$2", "pod", "(prometheus-)(.+)(-.+)") / on(node) group_left node_memory_MemTotal_bytes{role!="bastion"}) by (cluster_type, cluster_id, node) * 100
      record: aggregation:prometheus:memory_percentage
    - expr: sum(label_replace(container_memory_working_set_bytes{container='prometheus', namespace=~'.*-prometheus'}, "cluster_id", "$2", "pod", "(prometheus-)(.+)(-.+)")) by (cluster_type , cluster_id)
      record: aggregation:prometheus:memory_usage
    # Managed apps basic SLI metrics
    - expr: sum(monitoring:managed_apps:service_level:primary:error_budget_used) by (cluster_type, cluster_id,workload_name,workload_type) >= 1
      record: aggregation:managed_apps:service_level:basic:error_budget_depleted
    - expr: sum(monitoring:managed_apps:service_level:primary:error_budget_used) by (cluster_type, cluster_id,workload_name,workload_type) >= 0.75
      record: aggregation:managed_apps:service_level:basic:error_budget_low
