{{- if .Values.alertmanager.enabled }}
apiVersion: monitoring.coreos.com/v1alpha1
kind: AlertmanagerConfig
metadata:
  name: alertmanager-config
  namespace: monitoring
  labels:
    app.kubernetes.io/instance: alertmanager
    app.kubernetes.io/name: alertmanager
spec:
  route:
    groupBy: [alertname, cluster_id, installation, status]
    groupInterval: 15m
    groupWait: 30s
    repeatInterval: 4h
    receiver: root
    routes:
    - receiver: harbor_implementation
      matchers:
        - app="harbor"
      continue: false

    # Falco noise Slack
    - receiver: falco_noise_slack
      matchers:
        - alertname=~"Falco.*"
      continue: false

    # Team Shield Slack
    # Shield doesn't have a proper support and on-call rotation yet, we're only forwarding
    # alerts to the slack channel. Once the proper rotation is in place, we have to move it below
    # the default opsgenie route
    - receiver: team_shield_slack
      matchers:
        - severity=~"page|notify"
        - team="shield"
      continue: false

    # Team Ops Opsgenie
    - receiver: opsgenie_router
      matchers:
        - severity="page"
      continue: true

    # Service Level slack -- chooses the slack channel based on the provider
    {{- if or ( eq .Values.managementCluster.provider.kind "aws") (eq .Values.managementCluster.provider.kind "azure") }}
    - receiver: team_phoenix_slack
    {{- else if or (eq .Values.managementCluster.provider.kind "gcp") (eq .Values.managementCluster.provider.kind "capa") }}
    - receiver: team_hydra_slack
    {{- else if eq .Values.managementCluster.provider.kind "capz" }}
    - receiver: team_clippy_slack
    {{- else }}
    - receiver: team_rocket_slack
    {{- end }}
      matchers:
        - alertname="ServiceLevelBurnRateTooHigh"
      continue: false

    # Team Atlas Slack
    - receiver: team_atlas_slack
      matchers:
      {{- if eq .Values.managementCluster.pipeline "stable" }}
      - severity!="page"
      {{- end }}
      - team="atlas"
      - type!="heartbeat"
      - alertname!~"Inhibition.*"
      continue: false

    # Team Celestial Slack
    - receiver: team_phoenix_slack
      matchers:
        - severity=~"page|notify"
        - team="celestial"
      continue: false

    # Team Firecracker Slack
    - receiver: team_phoenix_slack
      matchers:
        - severity=~"page|notify"
        - team="firecracker"
      continue: false

    # Team Phoenix Slack
    - receiver: team_phoenix_slack
      matchers:
        - severity=~"page|notify"
        - team="phoenix"
      continue: false

    # Team Hydra Slack
    - receiver: team_hydra_slack
      matchers:
        - severity=~"page|notify"
        - team="hydra"
      continue: false

    # Team Clippy Slack
    - receiver: team_clippy_slack
      matchers:
        - severity=~"page|notify"
        - team="clippy"
      continue: false

    # Team Rocket Slack
    - receiver: team_rocket_slack
      matchers:
        - severity=~"page|notify"
        - team="rocket"
      continue: false

    # Team Ops Slack
    - receiver: team_ops_slack
      matchers:
        - severity=~"page|notify"
      continue: true

  receivers:
  - name: root

  - name: 'harbor_implementation'
    slackConfigs:
      - channel: '#harbor-implementation'

  - name: falco_noise_slack
    slackConfigs:
      - channel: '#noise-falco'
        sendResolved: true
        actions:
          - type: button
            text: ':green_book: OpsRecipe'
            url: {{`'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{ (index .Alerts 0).Annotations.opsrecipe }}'`}}
            style: '{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}'
          - type: button
            text: ':coffin: Linked PMs'
            url: {{`'{{ template "__alert_linked_postmortems" . }}'`}}
          - type: button
            text: ':mag: Query'
            url: {{`'{{ (index .Alerts 0).GeneratorURL }}'`}}
          - type: button
            text: ':grafana: Dashboard'
            url: '{{ .Values.grafana.address }}{{`/d/{{ (index .Alerts 0).Annotations.dashboard }}`}}'
          - type: button
            text: ':no_bell: Silence'
            url: {{`'{{ template "__alert_silence_link" .}}'`}}
            style: {{`'{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}'`}}

  - name: team_atlas_slack
    slackConfigs:
    {{- if eq .Values.managementCluster.pipeline "stable" }}
    - channel: '#alert-atlas'
    {{- else }}
    - channel: '#alert-atlas-test'
    {{- end }}
      sendResolved: true
      actions:
        - type: button
          text: ':green_book: OpsRecipe'
          url: {{`'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{ (index .Alerts 0).Annotations.opsrecipe }}'`}}
          style: {{`'{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}'`}}
        - type: button
          text: ':coffin: Linked PMs'
          url: {{`'{{ template "__alert_linked_postmortems" . }}'`}}
        - type: button
          text: ':mag: Query'
          url: {{`'{{ (index .Alerts 0).GeneratorURL }}'`}}
        - type: button
          text: ':grafana: Dashboard'
          url: '{{ .Values.grafana.address }}{{`/d/{{ (index .Alerts 0).Annotations.dashboard }}`}}'
        - type: button
          text: ':no_bell: Silence'
          url: {{`'{{ template "__alert_silence_link" .}}'`}}
          style: {{`'{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}'`}}

  - name: team_phoenix_slack
    slackConfigs:
    {{- if eq .Values.managementCluster.pipeline "stable" }}
    - channel: '#alert-phoenix'
    {{- else }}
    - channel: '#alert-phoenix-test'
    {{- end }}
      sendResolved: true
      actions:
        - type: button
          text: ':green_book: OpsRecipe'
          url: {{`'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{ (index .Alerts 0).Annotations.opsrecipe }}'`}}
          style: {{`'{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}'`}}
        - type: button
          text: ':coffin: Linked PMs'
          url: {{`'{{ template "__alert_linked_postmortems" . }}'`}}
        - type: button
          text: ':mag: Query'
          url: {{`'{{ (index .Alerts 0).GeneratorURL }}'`}}
        - type: button
          text: ':grafana: Dashboard'
          url: '{{ .Values.grafana.address }}{{`/d/{{ (index .Alerts 0).Annotations.dashboard }}`}}'
        - type: button
          text: ':no_bell: Silence'
          url: {{`'{{ template "__alert_silence_link" . }}'`}}
          style: {{`'{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}'`}}

  - name: team_hydra_slack
    slackConfigs:
    {{- if eq .Values.managementCluster.pipeline "stable" }}
    - channel: '#alert-hydra'
    {{- else }}
    - channel: '#alert-hydra-test'
    {{- end }}
      sendResolved: true
      actions:
        - type: button
          text: ':green_book: OpsRecipe'
          url: {{`'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{ (index .Alerts 0).Annotations.opsrecipe }}'`}}
          style: {{`'{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}'`}}
        - type: button
          text: ':coffin: Linked PMs'
          url: {{`'{{ template "__alert_linked_postmortems" . }}'`}}
        - type: button
          text: ':mag: Query'
          url: {{`'{{ (index .Alerts 0).GeneratorURL }}'`}}
        - type: button
          text: ':grafana: Dashboard'
          url: '{{ .Values.grafana.address }}{{`/d/{{ (index .Alerts 0).Annotations.dashboard }}`}}'
        - type: button
          text: ':no_bell: Silence'
          url: {{`'{{ template "__alert_silence_link" . }}'`}}
          style: {{`'{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}'`}}

  - name: team_clippy_slack
    slackConfigs:
    {{- if eq .Values.managementCluster.pipeline "stable" }}
    - channel: '#alert-clippy'
    {{- else }}
    - channel: '#alert-clippy-test'
    {{- end }}
      sendResolved: true
      actions:
        - type: button
          text: ':green_book: OpsRecipe'
          url: {{`'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{ (index .Alerts 0).Annotations.opsrecipe }}'`}}
          style: {{`'{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}'`}}
        - type: button
          text: ':coffin: Linked PMs'
          url: {{`'{{ template "__alert_linked_postmortems" . }}'`}}
        - type: button
          text: ':mag: Query'
          url: {{`'{{ (index .Alerts 0).GeneratorURL }}'`}}
        - type: button
          text: ':grafana: Dashboard'
          url: '{{ .Values.grafana.address }}{{`/d/{{ (index .Alerts 0).Annotations.dashboard }}`}}'
        - type: button
          text: ':no_bell: Silence'
          url: {{`'{{ template "__alert_silence_link" . }}'`}}
          style: {{`'{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}'`}}

  - name: team_rocket_slack
    slackConfigs:
    {{- if eq .Values.managementCluster.pipeline "stable" }}
    - channel: '#alert-rocket'
    {{- else }}
    - channel: '#alert-rocket-test'
    {{- end }}
      sendResolved: true
      actions:
        - type: button
          text: ':green_book: OpsRecipe'
          url: {{`'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{ (index .Alerts 0).Annotations.opsrecipe }}'`}}
          style: {{`'{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}'`}}
        - type: button
          text: ':coffin: Linked PMs'
          url: {{`'{{ template "__alert_linked_postmortems" . }}'`}}
        - type: button
          text: ':mag: Query'
          url: {{`'{{ (index .Alerts 0).GeneratorURL }}'`}}
        - type: button
          text: ':grafana: Dashboard'
          url: '{{ .Values.grafana.address }}{{`/d/{{ (index .Alerts 0).Annotations.dashboard }}`}}'
        - type: button
          text: ':no_bell: Silence'
          url: {{`'{{ template "__alert_silence_link" . }}'`}}
          style: {{`'{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}'`}}

  - name: team_shield_slack
    slackConfigs:
      - channel: '#alert-shield'
        sendResolved: true
        actions:
          - type: button
            text: ':green_book: OpsRecipe'
            url: {{`'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{ (index .Alerts 0).Annotations.opsrecipe }}'`}}
            style: {{`'{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}'`}}
          - type: button
            text: ':coffin: Linked PMs'
            url: {{`'{{ template "__alert_linked_postmortems" . }}'`}}
          - type: button
            text: ':mag: Query'
            url: {{`'{{ (index .Alerts 0).GeneratorURL }}'`}}
          - type: button
            text: ':grafana: Dashboard'
            url: '{{ .Values.grafana.address }}{{`/d/{{ (index .Alerts 0).Annotations.dashboard }}`}}'
          - type: button
            text: ':no_bell: Silence'
            url: {{`'{{ template "__alert_silence_link" .}}'`}}
            style: {{`'{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}'`}}

  - name: opsgenie_router
    opsgenieConfigs:
      - apiKey:
          key: opsgenie.key
          name: alertmanager-alertmanager-generated
        tags: "{{`{{ (index .Alerts 0).Labels.alertname }},{{ (index .Alerts 0).Labels.cluster_type }},{{ (index .Alerts 0).Labels.severity }},{{ (index .Alerts 0).Labels.team }},{{ (index .Alerts 0).Labels.area }},{{ (index .Alerts 0).Labels.service_priority }},`}}{{ .Values.managementCluster.provider }},{{ .Values.managementCluster.name }},{{ .Values.managementCluster.pipeline }}"
  - name: team_ops_slack
    slackConfigs:
      {{- if eq .Values.managementCluster.pipeline "stable" }}
    - channel: '#alert'
      {{- else }}
    - channel: '#alert-test-{{ .Values.managementCluster.name }}'
      {{- end }}
      sendResolved: true
      actions:
        - type: button
          text: ':green_book: OpsRecipe'
          url: {{`'https://intranet.giantswarm.io/docs/support-and-ops/ops-recipes/{{ (index .Alerts 0).Annotations.opsrecipe }}'`}}
          style: {{`'{{ if eq .Status "firing" }}primary{{ else }}default{{ end }}'`}}
        - type: button
          text: ':coffin: Linked PMs'
          url: {{`'{{ template "__alert_linked_postmortems" . }}'`}}
        - type: button
          text: ':mag: Query'
          url: {{`'{{ (index .Alerts 0).GeneratorURL }}'`}}
        - type: button
          text: ':grafana: Dashboard'
          url: '{{ .Values.grafana.address }}{{`/d/{{ (index .Alerts 0).Annotations.dashboard }}`}}'
        - type: button
          text: ':no_bell: Silence'
          url: {{`'{{ template "__alert_silence_link" . }}'`}}
          style: {{`'{{ if eq .Status "firing" }}danger{{ else }}default{{ end }}'`}}

  inhibitRules:
    - sourceMatch:
        - name: kube_state_metrics_down
          value: "true"
      targetMatch:
        - name: cancel_if_kube_state_metrics_down
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: kube_state_metrics_down
          value: "true"
        - name: cluster_id
          value: {{ .Values.managementCluster.name }}
      targetMatch:
        - name: cancel_if_mc_kube_state_metrics_down
          value: "true"

    - sourceMatch:
        - name: kube_state_metrics_down
          value: "true"
      targetMatch:
        - name: cancel_if_any_kube_state_metrics_down
          value: "true"

    - sourceMatch:
        - name: cluster_status_creating
          value: "true"
      targetMatch:
        - name: cancel_if_cluster_status_creating
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: cluster_status_created
          value: "true"
      targetMatch:
        - name: cancel_if_cluster_status_created
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: cluster_status_updating
          value: "true"
      targetMatch:
        - name: cancel_if_cluster_status_updating
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: cluster_status_updated
          value: "true"
      targetMatch:
        - name: cancel_if_cluster_status_updated
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: cluster_status_deleting
          value: "true"
      targetMatch:
        - name: cancel_if_cluster_status_deleting
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: cluster_with_no_nodepools
          value: "true"
      targetMatch:
        - name: cancel_if_cluster_with_no_nodepools
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: cluster_with_scaling_nodepools
          value: "true"
      targetMatch:
        - name: cancel_if_cluster_with_scaling_nodepools
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: cluster_with_notready_nodepools
          value: "true"
      targetMatch:
        - name: cancel_if_cluster_with_notready_nodepools
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: instance_state_not_running
          value: "true"
      targetMatch:
        - name: cancel_if_instance_state_not_running
          value: "true"
      equal: [node]

    - sourceMatch:
        - name: kiam_has_errors
          value: "true"
      targetMatch:
        - name: cancel_if_kiam_has_errors
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: kubelet_down
          value: "true"
      targetMatch:
        - name: cancel_if_kubelet_down
          value: "true"
      equal: [cluster_id, ip]

    - sourceMatch:
        - name: kubelet_down
          value: "true"
      targetMatch:
        - name: cancel_if_any_kubelet_down
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: kubelet_not_ready
          value: "true"
      targetMatch:
        - name: cancel_if_kubelet_not_ready
          value: "true"
      equal: [cluster_id, ip]

    - sourceMatch:
        - name: kubelet_not_ready
          value: "true"
      targetMatch:
        - name: cancel_if_any_kubelet_not_ready
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: nodes_down
          value: "true"
      targetMatch:
        - name: cancel_if_nodes_down
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: scrape_timeout
          value: "true"
      targetMatch:
        - name: cancel_if_scrape_timeout
          value: "true"
      equal: [cluster_id, instance]

    - sourceMatch:
        - name: master_node_down
          value: "true"
      targetMatch:
        - name: cancel_if_master_node_down
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: apiserver_down
          value: "true"
      targetMatch:
        - name: cancel_if_apiserver_down
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: apiserver_down
          value: "true"
      targetMatch:
        - name: cancel_if_any_apiserver_down
          value: "true"

    - sourceMatch:
        - name: outside_working_hours
          value: "true"
      targetMatch:
        - name: cancel_if_outside_working_hours
          value: "true"

    - sourceMatch:
        - name: has_worker_nodes
          value: "false"
      targetMatch:
        - name: cancel_if_cluster_has_no_workers
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: cluster_is_not_running_prometheus_agent
          value: "true"
      targetMatch:
        - name: cancel_if_cluster_is_not_running_prometheus_agent
          value: "true"
      equal: [cluster_id]

    - sourceMatch:
        - name: stack_failed
          value: "true"
      targetMatch:
        - name: cancel_if_stack_failed
          value: "true"
{{- end }}
